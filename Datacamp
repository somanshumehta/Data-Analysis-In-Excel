======================================================================================================================================================================
Introduction to eXtensible Time Series, using xts and zoo for time series

xts and zoo are just two of the many different types of objects that exist in R. This chapter will introduce the basic objects in xts and zoo and their components, and offers examples of how to construct and examine the data.

Introducing xts and zoo objects
What is an xts object?
More than a matrix
Your first xts object
Deconstructing xts
Time based indices
Importing, exporting and converting time series
Converting xts objects
Importing data
Exporting xts objects

2 First Order of Business - Basic Manipulations
Now that you can create basic xts objects, it's time to see how powerful they can be. This chapter will cover the basics of one of the most useful features of xts: time based subsetting. From there you'll explore additional ways to extract data using time phrases, and conclude with how to do basic operations like adding and subtracting your xts objects.

Introducing time based queries
The ISO-8601 standard
Querying for dates
Extracting recurring intraday intervals
Alternative extraction techniques
Row selection with time objects
Update and replace elements
Methods to find periods in your data
Find the first or last period of time
Combining first and last
Math operations using xts
Matrix arithmetic - add, subtract, multiply, and divide in time!
Math with non-overlapping indexes

3 Merging and modifying time series
One of the most important parts of working with time series data involves creating derived time series. To do this effectively, it is critical to keep track of dates and times. In this chapter you will look at how xts handles merging new columns and rows into existing data, how to deal with the inevitable missing observations in time series, and how to shift your series in time.

Merging time series
Combining xts by column with merge
Combining xts by row with rbind
What types of data can be combined using merge?
Handling missingness
Fill missing values using last or previous observation
NA interpolation using na.approx()
Lags and differences
Combine a leading and lagging time series
Calculate a difference of a series using diff()
What is the key difference in lag between xts and zoo

4 Apply and aggregate by time
Now the fun begins! A very common usage pattern for time series is to calculate values for disjoint periods of time or aggregate values from a higher frequency to a lower frequency. For most series, you'll often want to see the weekly mean of a price or measurement. You may even find yourself looking at data that has different frequencies and you need to normalize to the lowest frequency. This chapter is where it all happens. Hang tight, and lets get going!

Apply functions by time
Find intervals by time in xts
Apply a function by time period(s)
Using lapply() and split() to apply functions on intervals
Selection by endpoints vs. split-lapply-rbind
Converting periodicity
Convert univariate series to OHLC data
Convert a series to a lower frequency
Rolling functions
Calculate basic rolling value of series by month
Calculate the rolling standard deviation of a time series
Hide Details

5 Extra features of xts
Now that you are comfortable with most of the core features, its time to explore some of the lesser known (but powerful!) aspects of working with xts. In this final chapter you will use the internals of the index to find repeating itervals, see how xts provides intuitive time zone support, and experiment with ways to explore your data by time - including identifying frequency and coverage in time. Let's finish this course!

Index, attributes, and time zones
Time via index()
Class attributes - tclass, tzone, and tformat
Time Zones (and why you should care!)
Periods, periodicity and timestamps
Determining periodicity
Find the number of periods in your data
Secret index tools
Modifying timestamps
Congratulations!


=====================================================================================================================================================================

Importing and Managing Financial Data in R
5 hours, 15 Videos, 57 Exercises
Course Description
If you've ever done anything with financial or economic time series, you know the data come in various shapes, sizes, and periodicities. Getting the data into R can be stressful and time-consuming, especially when you need to merge data from several different sources into one data set. This course will cover importing data from local files as well as from internet sources.

1 Introduction and downloading data
A wealth of financial and economic data are available online. Learn how getSymbols() and Quandl() make it easy to access data from a variety of sources.
Welcome to the course!
Introducing getSymbols()
Data sources
Make getSymbols() return the data it retrieves
Introduction to Quandl
Introducing Quandl()
Return data type
Finding data from internet sources
Find stock ticker from Yahoo Finance
Download exchange rate data from Oanda
Find and import Unemployment Rate data from FRED
2. Extracting and transforming data
You've learned how to import data from online sources, now it's time to see how to extract columns from the imported data. After you've learned how to extract columns from a single object, you will explore how to import, transform, and extract data from multiple instruments.
Extracting columns from financial time series


Extract one column from one instrument
Extract multiple columns from one instrument
Use getPrice to extract other columns
Importing and transforming multiple instruments
Use Quandl to download quarterly returns data
Combine many instruments into one object
Extract the Close column from many instruments
3. Managing data from multiple sources
Learn how to simplify and streamline your workflow by taking advantage of the ability to customize default arguments to `getSymbols()`. You will see how to customize defaults by data source, and then how to customize defaults by symbol. You will also learn how to handle problematic instrument symbols.
Setting default arguments for getSymbols()
Set a default data source
Set default arguments for a getSymbols source
Setting per-instrument default arguments
Set default data source for one symbol
Save and load symbol lookup table
How *not* to specify the getSymbols() source
Handling instrument symbols that clash or are not valid R names
Access the object using get() or backticks
Create valid name for one instrument
Create valid names for multiple instruments
4. Aligning data with different periodicities
You've learned how to import, extract, and transform data from multiple data sources. You often have to manipulate data from different sources in order to combine them into a single data set. First, you will learn how to convert sparse, irregular data into a regular series. Then you will review how to aggregate dense data to a lower frequency. Finally, you will learn how to handle issues with intra-day data.


Making irregular data regular
Create a zero-width and regular xts object
Use merge to make an irregular index regular
Aggregating to lower frequency
Aggregate daily data and merge with monthly data
Align series to first and last day of month
Aggregate to weekly, ending on Wednesdays
Aggregating and combining intraday data
Combine data that have timezones
Make irregular intra-day data regular
Fill missing values by trading day
Aggregate irregular intra-day data
5. Importing text data, and adjusting for corporate actions
You've learned the core workflow of importing and manipulating financial data. Now you will see how to import data from text files of various formats. Then you will learn how to check data for weirdness and handle missing values. Finally, you will learn how to adjust stock prices for splits and dividends.

Importing text files
Import well-formatted daily OHLC data
Import text files in other formats
Handle date and time in separate columns
Read text file containing multiple instruments
Checking for weirdness
Handle missing values
Visualize imported data
Cross reference sources
Adjusting for corporate actions
Adjust for stock splits and dividends
Download split and dividend data
Adjust univariate data for splits and dividends
When to adjust data
======================================================================================================================================================================
Time Series Analysis in R
4 hours, 16 Videos, 58 Exercises
Course Description
Many phenomena in our day-to-day lives, such as the movement of stock prices, are measured in intervals over a period of time. Time series analysis methods are extremely useful for analyzing these special data types. In this course, you will be introduced to some core time series analysis concepts and techniques.

1 Exploratory time series data analysis
This chapter will give you insights on how to organize and visualize time series data in R. You will learn several simplifying assumptions that are widely used in time series analysis, and common characteristics of financial time series.
Welcome to the course!
Exploring raw time series
Basic time series plots
What does the time index tell us?
Sampling frequency
Identifying the sampling frequency
When is the sampling frequency exact?
Missing values
Basic time series objects
Creating a time series object with ts()
Testing whether an object is a time series
Plotting a time series object
2 Predicting the future
In this chapter, you will conduct some trend spotting, and learn the white noise (WN) model, the random walk (RW) model, and the definition of stationary processes.
Trend spotting!
Random or not random?
Name that trend
Removing trends in variability via the logarithmic transformation
Removing trends in level by differencing
Removing seasonal trends with seasonal differencing
The white noise (WN) model
Simulate the white noise model
Estimate the white noise model
The random walk (RW) model
Simulate the random walk model
Simulate the random walk model with a drift
Estimate the random walk model
Stationary processes
Stationary or not?
Are the white noise model or the random walk model stationary?
3 Correlation analysis and the autocorrelation function
In this chapter, you will review the correlation coefficient, use it to compare two time series, and also apply it to compare a time series with its past, as an autocorrelation. You will discover the autocorrelation function (ACF) and practice estimating and visualizing autocorrelations for time series data.
Scatterplots
Asset prices vs. asset returns
Characteristics of financial time series
Plotting pairs of data
Covariance and correlation
Calculating sample covariances and correlations
Guess the correlation coefficient
Autocorrelation
Calculating autocorrelations
The autocorrelation function
Visualizing the autocorrelation function
4 Autoregression
In this chapter, you will learn the autoregressive (AR) model and several of its basic properties. You will also practice simulating and estimating the AR model in R, and compare the AR model with the random walk (RW) model.
The autoregressive model
Simulate the autoregressive model
Estimate the autocorrelation function (ACF) for an autoregression
Persistence and anti-persistence
Compare the random walk (RW) and autoregressive (AR) models
AR model estimation and forecasting
Estimate the autoregressive (AR) model
Simple forecasts from an estimated AR model
5 A simple moving average
In this chapter, you will learn the simple moving average (MA) model and several of its basic properties. You will also practice simulating and estimating the MA model in R, and compare the MA model with the autoregressive (AR) model.
The simple moving average model
Simulate the simple moving average model
Estimate the autocorrelation function (ACF) for a moving average
MA model estimation and forecasting
Estimate the simple moving average model
Simple forecasts from an estimated MA model
Compare AR and MA models
AR vs MA models
Name that model by time series plot
Name that model by ACF plot
¬¬
======================================================================================================================================================================
ARIMA Models in R
4 hours, 13 Videos, 45 Exercises
Course Description
In this course, you will become an expert in fitting ARIMA models to time series data using R. First, you will explore the nature of time series data using the tools in the R stats package. Next, you learn how to fit various ARMA models to simulated data (where you will know the correct model) using the R package astsa. Once you have mastered the basics, you will learn how to fit integrated ARMA models, or ARIMA models to various real data sets. You will learn how to check the validity of an ARIMA model and you will learn how to forecast time series data. Finally, you will learn how to fit ARIMA models to seasonal data, including forecasting using the astsa package.1 Time Series Data and Models
You will investigate the nature of time series data and learn the basics of ARMA models that can explain the behavior of such data. You will learn the basic R commands needed to help set up raw time series data to a form that can be analyzed using ARMA models. 
First things first
Data play
Elements of time series
Stationarity and nonstationarity
Differencing
Detrending data
Dealing with trend and heteroscedasticity
Stationary time series: ARMA
Simulating ARMA models
2 Fitting ARMA models
You will discover the wonderful world of ARMA models and how to fit these models to time series data. You will learn how to identify a model, how to choose the correct model, and how to verify a model once you fit it to data. You will learn how to use R time series commands from the stats and astsa packages.
AR and MA models
Fitting an AR(1) model
Fitting an AR(2) modelFitting an MA(1) modelAR and MA togetherFitting an ARMA model
Identify an ARMA model
Model choice and residual analysis
Model choice - I
Model choice - II
Residual analysis - I
Residual analysis - II
ARMA get in
3 ARIMA Models
Now that you know how to fit ARMA models to stationary time series, you will learn about integrated ARMA (ARIMA) models for nonstationary time series. You will fit the models to real data using R time series commands from the stats and astsa packages.
ARIMA - integrated ARMA
ARIMA - plug and play
Simulated ARIMA
Global warming
ARIMA diagnostics
Diagnostics - simulated overfitting
Diagnostics - global temperatures
Forecasting ARIMA
Forecasting simulated ARIMA
Forecasting global temperatures
4 Seasonal ARIMA
You will learn how to fit and forecast seasonal time series data using seasonal ARIMA models. This is accomplished using what you learned in the previous chapters and by learning how to extend the R time series commands available in the stats and astsa packages.
Pure seasonal models
P/ACF of pure seasonal models
Fit a pure seasonal model
Mixed seasonal models
Fit a mixed seasonal model
Data analysis - unemployment I
Data analysis - unemployment II
Data analysis - commodity prices
Data analysis - birth rate
Forecasting seasonal ARIMA
Forecasting monthly unemployment
How hard is it to forecast commodity prices?
Congratulations!

=======================================================================================================================================================================
Case Study: Analyzing City Time Series Data in R
4 hours, 12 Videos, 50 Exercises
Course Description
In this course, you will strengthen your knowledge of time series topics through interactive exercises and interesting datasets. You’ll explore a variety of datasets about Boston, including data on flights, weather, economic trends, and local sports teams.
1 Flight Data
You've been hired to understand the travel needs of tourists visiting the Boston area. As your first assignment on the job, you'll practice the skills you've learned for time series data manipulation in R by exploring data on flights arriving at Boston's Logan International Airport (BOS) using xts & zoo.
Review xts fundamentals
Identify the time series
Flight data
Pick out the xts object
Encoding your flight data
Manipulating and visualizing your data
Exploring your flight data
Visualize flight data
Calculate time series trends
Saving and exporting xts objects
Assessing flight trends
Saving time - I
Saving time - II
2 Weather Data
In this chapter, you'll expand your time series data library to include weather data in the Boston area. Before you can conduct any analysis, you'll need to do some data manipulation, including merging multiple xts objects and isolating certain periods of the data. It's a great opportunity for more practice!
Merging time series data by row
Exploring temperature data
Next steps - I
Merging using rbind()
Visualizing Boston winters
Merging time series data by column
Subsetting and adjusting periodicity
Generating a monthly average
Using merge() and plotting over time
Are flight delays related to temperature?
Time series data workflow
Next steps - II
Expanding your data
Are flight delays related to visibility or wind?

3 Economic Data
Now it's time to go further afield. In addition to flight delays, your client is interested in how Boston's tourism industry is affected by economic trends. You'll need to manipulate some time series data on economic indicators, including GDP per capita and unemployment in the United States in general and Massachusetts (MA) in particular.
Handling missingness
Exploring economic data
Replace missing data - I
Replace missing data - II
Estimating missing GDP
Lagging and differencing
Exploring unemployment data
Lagging unemployment
Differencing unemployment
Rolling functions
Add a discrete rolling sum to GDP data
Add a continuous rolling average to unemployment data
Manipulating MA unemployment data

4 Sports Data
Having exhausted other options, your client now believes Boston's tourism industry must be related to the success of local sports teams. In your final task on this project, your supervisor has asked you to assemble some time series data on Boston's sports teams over the past few years.
Advanced features of xts
Encoding and plotting Red Sox data
Calculate a closing average
Calculate and plot a seasonal average
Calculate and plot a rolling average
Indexing commands in xts
Extract weekend games
Calculate a rolling average across all sports
Viewing sports trends
Congratulations

======================================================================================================================================================================
Forecasting in R
5 hours, 18 Videos, 55 Exercises
Course Description
Forecasting involves making predictions about the future. It is required in many situations: deciding whether to build another power generation plant in the next ten years requires forecasts of future demand; scheduling staff in a call centre next week requires forecasts of call volumes; stocking an inventory requires forecasts of stock requirements. Forecasts can be required several years in advance (for the case of capital investments), or only a few minutes beforehand (for telecommunication routing). Whatever the circumstances or time horizons involved, forecasting is an important aid to effective and efficient planning. This course provides an introduction to time series forecasting using R.
1 Exploring and visualizing time series in R
The first thing to do in any data analysis task is to plot the data. Graphs enable many features of the data to be visualized, including patterns, unusual observations, and changes over time. The features that are seen in plots of the data must then be incorporated, as far as possible, into the forecasting methods to be used.
Welcome to Forecasting Using R
Creating time series objects in R
Time series plotsSeasonal plots
Trends, seasonality, and cyclicity
Autocorrelation of non-seasonal time series
Autocorrelation of seasonal and cyclic time series
Match the ACF to the time series
White noise
Stock prices and white noise

2 Benchmark methods and forecast accuracy
In this chapter, you will learn general tools that are useful for many different forecasting situations. It will describe some methods for benchmark forecasting, methods for checking whether a forecasting method has adequately utilized the available information, and methods for measuring forecast accuracy. Each of the tools discussed in this chapter will be used repeatedly in subsequent chapters as you develop and explore a range of forecasting methods.
Forecasts and potential futures
Naive forecasting methods
Fitted values and residuals
Checking time series residuals
Training and test sets
Evaluating forecast accuracy of non-seasonal methods
Evaluating forecast accuracy of seasonal methods
Do I have a good forecasting model?
Time series cross-validation
Using ts CV() for time series cross-validation

3 Exponential smoothing
Forecasts produced using exponential smoothing methods are weighted averages of past observations, with the weights decaying exponentially as the observations get older. In other words, the more recent the observation, the higher the associated weight. This framework generates reliable forecasts quickly and for a wide range of time series, which is a great advantage and of major importance to applications in business.
Exponentially weighted forecasts
Simple exponential smoothing
SES vs naïve
Exponential smoothing methods with trend 
Holt's trend methods
Exponential smoothing methods with trend and seasonality
Holt-Winters with monthly data
Holt-Winters method with daily data
State space models for exponential smoothing
Automatic forecasting with exponential smoothing
ETS vs seasonal naïve
Match the models to the time series
When does ETS fail?


4 Forecasting with ARIMA models
ARIMA models provide another approach to time series forecasting. Exponential smoothing and ARIMA models are the two most widely-used approaches to time series forecasting, and provide complementary approaches to the problem. While exponential smoothing models are based on a description of the trend and seasonality in the data, ARIMA models aim to describe the autocorrelations in the data.
Transformations for variance stabilization
Box-Cox transformations for time series
Non-seasonal differencing for stationarity
Seasonal differencing for stationarity
ARIMA models
Automatic ARIMA models for non-seasonal time series
Forecasting with ARIMA models
Comparing auto.arima() and ets() on non-seasonal data
Seasonal ARIMA models
Automatic ARIMA models for seasonal time series
Exploring auto.arima() options
Comparing auto.arima() and ets() on seasonal data

5 Advanced methods
The time series models in the previous chapters work well for many time series, but they are often not good for weekly or hourly data, and they do not allow for the inclusion of other information such as the effects of holidays, competitor activity, changes in the law, etc. In this chapter, you will look at some methods that handle more complicated seasonality, and you consider how to extend ARIMA models in order to allow other information to be included in them.

Dynamic regression
Forecasting sales allowing for advertising expenditure
Forecasting electricity demand
Dynamic harmonic regression
Forecasting weekly data
Harmonic regression for multiple seasonality
Forecasting call bookings
TBATS models
TBATS models for electricity demand
Your future in forecasting!
======================================================================================================================================================================
Visualizing Time Series Data in R
4 hours, 11 Videos, 45 Exercises
Course Description
As the saying goes, “A chart is worth a thousand words”. This is why visualization is the most used and powerful way to get a better understanding of your data. After this course you will have a very good overview of R time series visualisation capabilities and you will be able to better decide which model to choose for subsequent analysis. You will be able to also convey the message you want to deliver in an efficient and beautiful way.
1 R Time Series Visualization Tools
This chapter will introduce you to basic R time series visualization tools.
Refresher on xts and the plot() function
plot() function quiz
plot() function - basic parameters
plot() function - basic parameters (2)
Control graphic parameters
Graphic parameters quiz
Other useful visualizing functions
Adding an extra series to an existing chart
Highlighting events in a time series
Highlighting a specific period in a time series
A fancy stock chart
A fancy stock chart (2)

2 Univariate Time Series
Univariate plots are designed to learn as much as possible about the distribution, central tendency and spread of the data at hand. In this chapter you will be presented with some visual tools used to diagnose univariate time series.
Univariate time series analysis
Representing a univariate time series
Other visualization tools
Histogram of returns
Box and whisker plot
Autocorrelation
q-q plot
How to use everything we learned so far?
A comprehensive time series diagnostic
A comprehensive time series diagnostic (2)
Time Series quiz
Stock quiz

3 Multivariate Time Series
What to do if you have to deal with multivariate time series? In this chapter, you will learn how to identify patterns in the distribution, central tendency and spread over pairs or groups of data.
Dealing with higher dimensions
Two time series grouped or stacked
Visualizing bivariate relationships
Multivariate time series
Correlation matrix
Scatterplots for multiple pairs of data
Correlation plot
Higher dimension time series
Correlation matrix as heatmap
Wrap up quiz

4 Case study: Visually selecting a stock that improves your existing portfolio
Let's put everything you learned so far in practice! Imagine you already own a portfolio of stocks and you have some spare cash to invest, how can you wisely select a new stock to invest your additional cash? Analyzing the statistical properties of individual stocks vs. an existing portfolio is a good way of approaching the problem.
Case study presentation
Current portfolio description
Existing portfolio quiz
New stocks
New stocks description
New stocks description (2)
Portfolio quiz
Compare old and new portfolios
A more accurate comparison of portfolios
Wrap up quiz
Congratulations!

======================================================================================================================================================================
Introduction to Portfolio Analysis in R
5 hours, 14 Videos, 57 Exercises
Course Description
A golden rule in investing is to always test the portfolio strategy on historical data, and, once you are trading the strategy, to constantly monitor its performance. In this course, you will learn this by critically analyzing portfolio returns using the package PerformanceAnalytics. The course also shows how to estimate the portfolio weights that optimally balance risk and return. This is a data-driven course that combines portfolio theory with the practice in R, illustrated on real-life examples of equity portfolios and asset allocation problems. If you'd like to continue exploring the data after you've finished this course, the data used in the first three chapters can be obtained using the tseries-package. The code to get them can be found here. The data used in chapter 4 can be downloaded here.
1 The Building Blocks
Asset returns and portfolio weights; those are the building blocks of a portfolio return. This chapter is about computing those portfolio weights and returns in R.
Welcome to the course
Getting a grasp of the basics
Get a feel for the data
The portfolio weights
Calculating portfolio weights when component values are given
The weights of an equally weighted portfolio
The weights of a market capitalization-weighted portfolio
The portfolio return
Calculation of portfolio returns
From simple to gross and multi-period returns
The asymmetric impact of gains and losses
PerformanceAnalytics
Buy-and-hold versus (daily) rebalancing
The time series of asset returns
The time series of portfolio returns
The time series of weights



2 Analyzing Performance
The history of portfolio returns reveals valuable information about how much the investor can expect to gain or lose. This chapter introduces the R functionality to analyze the investment performance based on a statistical analysis of the portfolio returns. It includes graphical analysis and the calculation of performance statistics expressing average return, risk, and risk-adjusted return over rolling estimation samples.
Dimensions of portfolio performance
Exploring the monthly S&P 500 returns
The monthly mean and volatility
The (annualized) Sharpe ratio
Excess returns and the portfolio's Sharpe ratio
Annualized mean and volatility
Time-variation in portfolio performance
Effect of window length choice
Rolling annualized mean and volatility
Subperiod performance analysis and the function window
Non-normality of the return distribution
Balancing risk and reward
Detecting non-normality using skewness and kurtosis
Downside risk measures
Drawdowns due to buying high, selling low

3 Performance Drivers
In addition to studying portfolio performance based on the observed portfolio return series, it is relevant to determine how individual (expected) returns, volatilities, and correlations interact to determine the total portfolio performance.
Drivers in the case of two assets
Driver 1: The assets' individual performance
Driver 2: The choice of portfolio weights
Driver 3: The correlation between the asset returns
Interpreting correlation
Using matrix notation
Making a risk-reward scatter diagram
The covariance matrix
Matrix-based calculation of portfolio mean and variance
Portfolio risk budget
Who did it?

4 Optimizing the Portfolio
We have up to now considered the portfolio weights as given. In this chapter, you learn how to determine in R the portfolio weights that are optimal in terms of achieving a target return with minimum variance, while satisfying constraints on the portfolio weights.
Modern portfolio theory of Harry Markowitz
Mean-variance based investing in DJIA stocks
Exploring monthly returns of the 30 DJIA stocks
Finding the mean-variance efficient portfolio
Effect of the return target
Imposing weight constraints
The efficient frontier
Computing the efficient frontier using a grid of target returns
Interpreting the efficient frontier
Properties of the efficient frontier
The minimum variance and maximum Sharpe ratio portfolio
In-sample vs. out-of-sample evaluation
Split-sample evaluation
Out of sample performance evaluation
It isn’t over

======================================================================================================================================================================
Intermediate Portfolio Analysis in R
5 hours, 12 Videos, 42 Exercises
Course Description
This course builds on the fundamental concepts from Introduction to Portfolio Analysis in R and explores advanced concepts in the portfolio optimization process. It is critical for an analyst or portfolio manager to understand all aspects of the portfolio optimization problem to make informed decisions. In this course, you will learn a quantitative approach to apply the principles of modern portfolio theory to specify a portfolio, define constraints and objectives, solve the problem, and analyze the results. This course will use the R package PortfolioAnalytics to solve portfolio optimization problems with complex constraints and objectives that mirror real world problems.1
Introduction and Portfolio Theory
This chapter will give you a brief review of Modern Portfolio Theory and introduce you to the PortfolioAnalytics package by solving a couple portfolio optimization problems.
Welcome to the course!
Load the PortfolioAnalytics package
Solve a simple portfolio optimization problem
Visualize results
Modern Portfolio Theory objective
Defining risk
Challenges of portfolio optimization
Quadratic utility
Maximize quadratic utility function
Introduction to PortfolioAnalytics
Key design goals

2 Portfolio Optimization Workflow
The focus of this chapter is a detailed overview of the recommended workflow for solving portfolio optimization problems with PortfolioAnalytics. You will learn how to create a portfolio specification, add constraints, objectives, run the optimization, and analyze the results of the optimization output.
Portfolio specification, constraints, and objectives
Create a portfolio specification
Add constraints
Add objectives
Running optimizations
Single-Period optimization
Optimization with periodic rebalancing
Global solvers
Analyzing optimization results
Objective measure values
Optimal weights

3 Objective Functions and Moment Estimation
In this chapter, you will learn about estimating moments, characteristics of the distribution of asset returns, as well as custom objective functions.
Introduction to moments
Sample moment estimates
Advanced moment estimates
Method for estimating moments
Custom moment functions
Define a custom moment function
Optimization with custom moment function
Objective functions
Custom objective function
Optimization with custom objective function

4 Application
In the final chapter of the course, you will solve a portfolio optimization problem that mimics a real world real world example of constructing a portfolio of hedge fund strategy with different style definitions.
Application
Compute benchmark returns
Define the portfolio optimization problem
Benchmark
Optimization backtest
Backtest with periodic rebalancing
Refine constraints and objectives
Do improved estimates lead to improved performance?
Analyze results and compare to benchmark
Congratulations!

=======================================================================================================================================================================
INTERACTIVE COURSE
Bond Valuation and Analysis in R
4 hours, 13 Videos, 43 Exercises
Course Description
After this course on quantitative finance with R, you will be able to use R to develop a model to value a fixed interest rate bond, estimate and analyze a bond's yield (i.e., a measure of the opportunity cost of bond investors), and model techniques used to protect bond portfolios from changes in interest rates.Why value bonds?
Bonds are securities issued by governments or corporations that pay interest over a fixed schedule and are the most well-known type of fixed income securities. The US fixed income market is 1.5x larger than the US stock market, but, unlike stocks, most fixed income instruments, including bonds, trade very infrequently. Consequently, a bond's price may be a less reliable indicator of its value and analytical techniques are necessary when analyzing and valuing bonds.1
Introduction and Plain Vanilla Bond Valuation
The fixed income market is large and filled with complex instruments. In this course, we focus on plain vanilla bonds to build solid fundamentals you will need to tackle more complex fixed income instruments. In this chapter, we demonstrate the mechanics of valuing bonds by focusing on an annual coupon, fixed rate, fixed maturity, and option-free bond.
Introduction
Price vs. value
Time value of money
Computing a bond's future value
Computing a bond's present value
Bond valuation
Laying out the bond's cash flows
Discounting bond cash flows with a known yield
Convert your code into a function
Convert your code into a bond valuation function

2 Yield to Maturity
Estimating Yield To Maturity - The YTM measures the expected return to bond investors if they hold the bond until maturity. This number summarizes the compensation investors demand for the risk they are bearing by investing in a particular bond. We will discuss how one can estimate YTM of a bond.
Price-yield relationship
Credit ratings
The yield on the Moody's Baa index
Value the 5% bond using the Baa yield you found
Plotting the price/yield relationship
Components of yield
Risk-free yield
Plotting US Treasury yields
Plotting the investment grade spread
Estimating the yield of a bond
Finding a bond's yield
Use uniroot function to find YTM

3 Duration and Convexity
Interest rate risk is the biggest risk that bond investors face. When interest rates rise, bond prices fall. Because of this, much attention is paid to how sensitive a particular bond's price is to changes in interest rates. In this chapter, we start the discussion with a simple measure of bond price volatility - the Price Value of a Basis Point. Then, we discuss duration and convexity, which are two common measures that are used to manage interest rate risk.
Bond price volatility and the price value of a basis point
Price value of a basis point
Calculate PV01 of a 10% bond
Duration
Duration of a zero-coupon bond
Calculate approximate duration for a bond
Estimating effect on bond price using duration
Convexity
Calculate approximate convexity for a bond
Estimating effect of convexity on bond price
Estimating the bond price using duration and convexity

4 Comprehensive Example
We will put all of the techniques that the student has learned from Chapters One through Three into one comprehensive example. The student will be asked to value a bond by using the yield on a comparable bond and estimate the bond's duration and convexity.
Summarizing the main lessons
Find AAA bond yields as of September 30, 2016
Bond valuation
Alternative cash flow vector code
Duration and convexity
Direction of price change
Calculate duration
Calculate convexity measure
The estimated price change using duration and convexity
Congratulations!

======================================================================================================================================================================
Credit Risk Modeling in R
4 hours, 16 Videos, 52 Exercises, 
Course Description
This hands-on-course with real-life credit data will teach you how to model credit risk by using logistic regression and decision trees in R.Modeling credit risk for both personal and company loans is of major importance for banks. The probability that a debtor will default is a key component in getting to a measure for credit risk. While other models will be introduced in this course as well, you will learn about two model types that are often used in the credit scoring context; logistic regression and decision trees. You will learn how to use them in this particular context, and how these models are evaluated by banks.1
Introduction and data preprocessing
This chapter begins with a general introduction to credit risk models. We'll explore a real-life data set, then preprocess the data set such that it's in the appropriate format before applying the credit risk models.
Introduction and data structure
Exploring the credit data
Interpreting a CrossTable()
Histograms and outliers
Histograms
Outliers
Missing data and coarse classification
Deleting missing data
Replacing missing data
Keeping missing data
Data splitting and confusion matrices
Splitting the data set
Creating a confusion matrix

2 Logistic regression
Logistic regression is still a widely used method in credit risk modeling. In this chapter, you will learn how to apply logistic regression models on credit data in R.
Logistic regression: introduction
Basic logistic regression
Interpreting the odds for a categorical variable
Multiple variables in a logistic regression model
Interpreting significance levels
Logistic regression: predicting the probability of default
Predicting the probability of default
Making more discriminative models
Evaluating the logistic regression model result
Specifying a cut-off
Comparing two cut-offs
Wrap-up and remarks
Comparing link functions for a given cut-off

3 Decision trees
Classification trees are another popular method in the world of credit risk modeling. In this chapter, you will learn how to build classification trees using credit data in R.
What is a decision tree?
Computing the gain for a tree
Changing one Gini...
Building decision trees using the rpart()-package
Undersampling the training set
Changing the prior probabilities
Including a loss matrix
Pruning the decision tree
Pruning the tree with changed prior probabilities
Pruning the tree with the loss matrix
Other tree options and the construction of confusion matrices
One final tree using more options
Confusion matrices and accuracy of our final trees
Optimizing the accuracy

4 Evaluating a credit risk model
In this chapter, you'll learn how you can evaluate and compare the results obtained through several credit risk models.
Finding the right cut-off: the strategy curve
Computing a bad rate given a fixed acceptance rate
The strategy table and strategy curve
To tree or not to tree?
The ROC-curve
ROC-curves for comparison of logistic regression models
ROC-curves for comparison of tree-based models
Input selection based on the AUC
Another round of pruning based on AUC
Best of four
Further model reduction?
Course wrap-up

=====================================================================================================================================================================
Quantitative Risk Management in R
5 hours, 18 Videos, 55 Exercises
Course Description
In Quantitative Risk Management (QRM), you will build models to understand the risks of financial portfolios. This is a vital task across the banking, insurance and asset management industries. The first step in the model building process is to collect data on the underlying risk factors that affect portfolio value and analyze their behavior. In this course, you will learn how to work with risk-factor return series, study the empirical properties or so-called "stylized facts" of these data - including their typical non-normality and volatility, and make estimates of value-at-risk for a portfolio.
1 Exploring market risk-factor data
In this chapter, you will learn how to form return series, aggregate them over longer periods and plot them in different ways. You will look at examples using the qrmdata package.
Welcome to the course!
Exploring risk-factor time series: equity indexes
Exploring risk-factor time series: individual equities
Exploring risk-factor data: exchange rates
Risk-factor returns
Exploring return series
Different ways of plotting risk-factor and return series
Aggregating log-returns
Aggregating log-return series
A test on aggregation of log-returns
Exploring other kinds of risk factors
Commodities data
Interest-rate data

2 Real world returns are riskier than normal
In this chapter, you will learn about graphical and numerical tests of normality, apply them to different datasets, and consider the alternative Student t model.
The normal distribution
Graphical methods for assessing normality
Testing for normality
Q-Q plots for assessing normality
Skewness, kurtosis and the Jarque-Bera test
Numerical tests of normality
Testing normality for longer time horizons
Overlapping returns
Reviewing knowledge of normal distributions and returns
The Student t distribution
Fitting t distribution to data
Testing FX returns for normality
Testing interest-rate returns for normality
Testing gold price returns for normality

3 Real world returns are volatile and correlated
In this chapter, you will learn about volatility and how to detect it using act plots. You will learn how to apply Ljung-Box tests for serial correlation and estimate cross correlations.
Characteristics of volatile return series
Spotting a volatile time series
Estimating serial correlations
Using acf plots to reveal volatility
The Ljung-Box test
Applying Ljung-Box tests to return data
Applying Ljung-Box tests to longer-interval returns
Looking at the extremes in volatile return series
Extreme values in volatile time series
Cross correlations between risk-factor return series
The stylized facts of return series
Volatility and correlation of FX returns
Volatility and correlation of interest-rate data
Reviewing knowledge of volatility and correlation



4 Estimating portfolio value-at-risk (VaR)
In this chapter, the concept of value-at-risk and simple methods of estimating VaR based on historical simulation are introduced.
Value-at-risk and expected shortfall
Computing VaR and ES for normal distribution
International equity portfolio
Examining risk factors for international equity portfolio
Historical simulation
Estimating VaR and ES
Option portfolio and Black Scholes
Compute Black-Scholes price of an option
Equity and implied volatility risk factors
Historical simulation for the option example
Historical simulation of losses for option portfolio
Estimating VaR and ES for option portfolio
Computing VaR for weekly losses
Wrap-up

===================================================================================================================================================================
Financial Trading in R
5 hours, 20 Videos, 65 Exercises
Course Description

This course will cover the basics on financial trading and will give you an overview of how to use quantstrat to build signal-based trading strategies in R. It will teach you how to set up a quantstrat strategy, apply transformations of market data called indicators, create signals based on the interactions of those indicators, and even simulate orders. Lastly, it will explain how to analyze your results both from statistical and visual perspectives.1 Trading basics
In this chapter, you will learn the definition of trading, the philosophies of trading, and the pitfalls that exist in trading. This chapter covers both momentum and oscillation trading, along with some phrases to identify these types of philosophies. You will learn about overfitting and how to avoid it, obtaining and plotting financial data, and using a well-known indicator in trading.
Why do people trade?
Identifying types of trading philosophies - I
Identifying types of trading philosophies - II
Identifying types of trading philosophies - III
Pitfalls of various trading systems
How to prevent overfitting
Getting financial data
Plotting financial data
Adding indicators to financial data
Adding a moving average to financial data

2 A boilerplate for quantstrat strategies
Before building a strategy, the quantstrat package requires you to initialize some settings. In this chapter you will learn how this is done. You will cover a series of functions that deal with initializing a time zone, currency, the instruments you'll be working with, along with quantstrat's various frameworks that will allow it to perform analytics. Once this is done, you will have the knowledge to set up a quantstrat initialization file, and know how to change it.
Setting up a strategy I
Understanding initialization settings - I
Understanding initialization settings - II
Setting up a strategy II
Understanding initialization settings - III
Understanding initialization settings - IVHIDE CHAPTER DETAILS
3 Indicators
Indicators are crucial for your trading strategy. They are transformations of market data that allow a clearer understanding of its overall behavior, usually in exchange for lagging the market behavior. Here, you will be working with both trend types of indicators as well as oscillation indicators. You will also learn how to use pre-programmed indicators available in other libraries as well as implement one of your own.
Introduction to indicators
The SMA and RSI functions
Visualize an indicator and guess its purpose - I
Visualize an indicator and guess its purpose - II
Indicator mechanics
Implementing an indicator - I
Implementing an indicator - II
Implementing an indicator - III
Indicator structure review
Code your own indicator - I
Code your own indicator - II
Apply your own indicator

4 Signals
When constructing a quantstrat strategy, you want to see how the market interacts with indicators and how indicators interact with each other. In this chapter you'll learn how indicators can generate signals in quantstrat. Signals are interactions of market data with indicators, or indicators with other indicators. There are four types of signals in quantstrat: sigComparison, sigCrossover, sigThreshold, and sigFormula. By the end of this chapter, you'll know all about these signals, what they do, and how to use them.
Introduction to signals
Signal or not? - I
Signal or not? - II
sigComparison and sigCrossover
Using sigComparison
Using sigCrossover
sigThreshold
Using sigThreshold - I
Using sigThreshold() - II
sigFormula
Using sigFormula()
Combining signals - I
Combining signals – II
5 Rules
In this chapter, you'll learn how to shape your trading transaction once you decide to execute on a signal. This chapter will cover a basic primer on rules, and how to enter and exit positions. You'll also learn how to send inputs to order-sizing functions. By the end of this chapter, you'll learn the gist of how rules function, and where you can continue learning about them.
Introduction to rules
Using add.rule() to implement an exit rule
Specifying sigcol in add.rule()
Specifying sigval in add.rule()
More rule mechanics
Specifying orderqty in add.rule()
Specifying ordertype in add.rule()
Specifying orderside in add.rule()
More rule mechanics II
Specifying replace in add.rule()
Specifying prefer in add.rule()
Using add.rule() to implement an entry rule
Order sizing functions
Implementing a rule with an order sizing functionHIDE CHAPTER DETAILS
6 Analyzing results
After a quantstrat strategy has been constructed, it's vital to know how to actually analyze the strategy's performance. This chapter details just that. You will learn how to read vital trade statistics, and view the performance of your trading strategy over time. You will also learn how to get a reward to risk ratio called the Sharpe ratio in two different ways. This is the last chapter.
Analyzing your strategy
Running your strategy
Profit factor
Percent positive
Visualizing your strategy
Using chart.Posn()
Adding an indicator to a chart.Posn() chart
Additional analytics
Cash Sharpe ratio
Returns Sharpe ratio in quantstrat

Ilya Kipnis
Professional Quantitative Analyst and R programmer
Ilya Kipnis is a professional quantitative analyst and R programmer. He received his M.S. degree in statistics in 2010 from Rutgers University, and has worked in the financial industry for several years. He is also a co-author in the book "Introduction to Quantitative Trading With R", and an internationally read quantitative research blogger. His work can be found at QuantStrat TradeR.


