======================================================================================================================================================================
Introduction to eXtensible Time Series, using xts and zoo for time series

xts and zoo are just two of the many different types of objects that exist in R. This chapter will introduce the basic objects in xts and zoo and their components, and offers examples of how to construct and examine the data.

Introducing xts and zoo objects
What is an xts object?
More than a matrix
Your first xts object
Deconstructing xts
Time based indices
Importing, exporting and converting time series
Converting xts objects
Importing data
Exporting xts objects

2 First Order of Business - Basic Manipulations
Now that you can create basic xts objects, it's time to see how powerful they can be. This chapter will cover the basics of one of the most useful features of xts: time based subsetting. From there you'll explore additional ways to extract data using time phrases, and conclude with how to do basic operations like adding and subtracting your xts objects.

Introducing time based queries
The ISO-8601 standard
Querying for dates
Extracting recurring intraday intervals
Alternative extraction techniques
Row selection with time objects
Update and replace elements
Methods to find periods in your data
Find the first or last period of time
Combining first and last
Math operations using xts
Matrix arithmetic - add, subtract, multiply, and divide in time!
Math with non-overlapping indexes

3 Merging and modifying time series
One of the most important parts of working with time series data involves creating derived time series. To do this effectively, it is critical to keep track of dates and times. In this chapter you will look at how xts handles merging new columns and rows into existing data, how to deal with the inevitable missing observations in time series, and how to shift your series in time.

Merging time series
Combining xts by column with merge
Combining xts by row with rbind
What types of data can be combined using merge?
Handling missingness
Fill missing values using last or previous observation
NA interpolation using na.approx()
Lags and differences
Combine a leading and lagging time series
Calculate a difference of a series using diff()
What is the key difference in lag between xts and zoo

4 Apply and aggregate by time
Now the fun begins! A very common usage pattern for time series is to calculate values for disjoint periods of time or aggregate values from a higher frequency to a lower frequency. For most series, you'll often want to see the weekly mean of a price or measurement. You may even find yourself looking at data that has different frequencies and you need to normalize to the lowest frequency. This chapter is where it all happens. Hang tight, and lets get going!

Apply functions by time
Find intervals by time in xts
Apply a function by time period(s)
Using lapply() and split() to apply functions on intervals
Selection by endpoints vs. split-lapply-rbind
Converting periodicity
Convert univariate series to OHLC data
Convert a series to a lower frequency
Rolling functions
Calculate basic rolling value of series by month
Calculate the rolling standard deviation of a time series
Hide Details

5 Extra features of xts
Now that you are comfortable with most of the core features, its time to explore some of the lesser known (but powerful!) aspects of working with xts. In this final chapter you will use the internals of the index to find repeating itervals, see how xts provides intuitive time zone support, and experiment with ways to explore your data by time - including identifying frequency and coverage in time. Let's finish this course!

Index, attributes, and time zones
Time via index()
Class attributes - tclass, tzone, and tformat
Time Zones (and why you should care!)
Periods, periodicity and timestamps
Determining periodicity
Find the number of periods in your data
Secret index tools
Modifying timestamps
Congratulations!


=====================================================================================================================================================================

Importing and Managing Financial Data in R
5 hours, 15 Videos, 57 Exercises
Course Description
If you've ever done anything with financial or economic time series, you know the data come in various shapes, sizes, and periodicities. Getting the data into R can be stressful and time-consuming, especially when you need to merge data from several different sources into one data set. This course will cover importing data from local files as well as from internet sources.

1 Introduction and downloading data
A wealth of financial and economic data are available online. Learn how getSymbols() and Quandl() make it easy to access data from a variety of sources.
Welcome to the course!
Introducing getSymbols()
Data sources
Make getSymbols() return the data it retrieves
Introduction to Quandl
Introducing Quandl()
Return data type
Finding data from internet sources
Find stock ticker from Yahoo Finance
Download exchange rate data from Oanda
Find and import Unemployment Rate data from FRED
2. Extracting and transforming data
You've learned how to import data from online sources, now it's time to see how to extract columns from the imported data. After you've learned how to extract columns from a single object, you will explore how to import, transform, and extract data from multiple instruments.
Extracting columns from financial time series


Extract one column from one instrument
Extract multiple columns from one instrument
Use getPrice to extract other columns
Importing and transforming multiple instruments
Use Quandl to download quarterly returns data
Combine many instruments into one object
Extract the Close column from many instruments
3. Managing data from multiple sources
Learn how to simplify and streamline your workflow by taking advantage of the ability to customize default arguments to `getSymbols()`. You will see how to customize defaults by data source, and then how to customize defaults by symbol. You will also learn how to handle problematic instrument symbols.
Setting default arguments for getSymbols()
Set a default data source
Set default arguments for a getSymbols source
Setting per-instrument default arguments
Set default data source for one symbol
Save and load symbol lookup table
How *not* to specify the getSymbols() source
Handling instrument symbols that clash or are not valid R names
Access the object using get() or backticks
Create valid name for one instrument
Create valid names for multiple instruments
4. Aligning data with different periodicities
You've learned how to import, extract, and transform data from multiple data sources. You often have to manipulate data from different sources in order to combine them into a single data set. First, you will learn how to convert sparse, irregular data into a regular series. Then you will review how to aggregate dense data to a lower frequency. Finally, you will learn how to handle issues with intra-day data.


Making irregular data regular
Create a zero-width and regular xts object
Use merge to make an irregular index regular
Aggregating to lower frequency
Aggregate daily data and merge with monthly data
Align series to first and last day of month
Aggregate to weekly, ending on Wednesdays
Aggregating and combining intraday data
Combine data that have timezones
Make irregular intra-day data regular
Fill missing values by trading day
Aggregate irregular intra-day data
5. Importing text data, and adjusting for corporate actions
You've learned the core workflow of importing and manipulating financial data. Now you will see how to import data from text files of various formats. Then you will learn how to check data for weirdness and handle missing values. Finally, you will learn how to adjust stock prices for splits and dividends.

Importing text files
Import well-formatted daily OHLC data
Import text files in other formats
Handle date and time in separate columns
Read text file containing multiple instruments
Checking for weirdness
Handle missing values
Visualize imported data
Cross reference sources
Adjusting for corporate actions
Adjust for stock splits and dividends
Download split and dividend data
Adjust univariate data for splits and dividends
When to adjust data
======================================================================================================================================================================

